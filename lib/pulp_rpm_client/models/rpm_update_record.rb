=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module SwaggerClient
  class RpmUpdateRecord
    attr_accessor :pulp_href

    # Timestamp of creation.
    attr_accessor :pulp_created

    # Artifact file representing the physical content
    attr_accessor :artifact

    # Update id (short update name, e.g. RHEA-2013:1777)
    attr_accessor :id

    # Date when the update was updated (e.g. '2013-12-02 00:00:00')
    attr_accessor :updated_date

    # Update description
    attr_accessor :description

    # Date when the update was issued (e.g. '2013-12-02 00:00:00')
    attr_accessor :issued_date

    # Source of the update (e.g. security@redhat.com)
    attr_accessor :fromstr

    # Update status ('final', ...)
    attr_accessor :status

    # Update name
    attr_accessor :title

    # Short summary
    attr_accessor :summary

    # Update version (probably always an integer number)
    attr_accessor :version

    # Update type ('enhancement', 'bugfix', ...)
    attr_accessor :type

    # Severity
    attr_accessor :severity

    # Solution
    attr_accessor :solution

    # Update release
    attr_accessor :release

    # Copyrights
    attr_accessor :rights

    # Push count
    attr_accessor :pushcount

    # List of packages
    attr_accessor :pkglist

    # List of references
    attr_accessor :references

    # Reboot suggested
    attr_accessor :reboot_suggested

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pulp_href' => :'pulp_href',
        :'pulp_created' => :'pulp_created',
        :'artifact' => :'artifact',
        :'id' => :'id',
        :'updated_date' => :'updated_date',
        :'description' => :'description',
        :'issued_date' => :'issued_date',
        :'fromstr' => :'fromstr',
        :'status' => :'status',
        :'title' => :'title',
        :'summary' => :'summary',
        :'version' => :'version',
        :'type' => :'type',
        :'severity' => :'severity',
        :'solution' => :'solution',
        :'release' => :'release',
        :'rights' => :'rights',
        :'pushcount' => :'pushcount',
        :'pkglist' => :'pkglist',
        :'references' => :'references',
        :'reboot_suggested' => :'reboot_suggested'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'pulp_href' => :'String',
        :'pulp_created' => :'DateTime',
        :'artifact' => :'String',
        :'id' => :'String',
        :'updated_date' => :'String',
        :'description' => :'String',
        :'issued_date' => :'String',
        :'fromstr' => :'String',
        :'status' => :'String',
        :'title' => :'String',
        :'summary' => :'String',
        :'version' => :'String',
        :'type' => :'String',
        :'severity' => :'String',
        :'solution' => :'String',
        :'release' => :'String',
        :'rights' => :'String',
        :'pushcount' => :'String',
        :'pkglist' => :'Array<RpmUpdateCollection>',
        :'references' => :'Array<Hash<String, String>>',
        :'reboot_suggested' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'pulp_href')
        self.pulp_href = attributes[:'pulp_href']
      end

      if attributes.has_key?(:'pulp_created')
        self.pulp_created = attributes[:'pulp_created']
      end

      if attributes.has_key?(:'artifact')
        self.artifact = attributes[:'artifact']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'updated_date')
        self.updated_date = attributes[:'updated_date']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'issued_date')
        self.issued_date = attributes[:'issued_date']
      end

      if attributes.has_key?(:'fromstr')
        self.fromstr = attributes[:'fromstr']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.has_key?(:'solution')
        self.solution = attributes[:'solution']
      end

      if attributes.has_key?(:'release')
        self.release = attributes[:'release']
      end

      if attributes.has_key?(:'rights')
        self.rights = attributes[:'rights']
      end

      if attributes.has_key?(:'pushcount')
        self.pushcount = attributes[:'pushcount']
      end

      if attributes.has_key?(:'pkglist')
        if (value = attributes[:'pkglist']).is_a?(Array)
          self.pkglist = value
        end
      end

      if attributes.has_key?(:'references')
        if (value = attributes[:'references']).is_a?(Array)
          self.references = value
        end
      end

      if attributes.has_key?(:'reboot_suggested')
        self.reboot_suggested = attributes[:'reboot_suggested']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@id.nil? && @id.to_s.length < 1
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 1.')
      end

      if !@updated_date.nil? && @updated_date.to_s.length < 1
        invalid_properties.push('invalid value for "updated_date", the character length must be great than or equal to 1.')
      end

      if !@issued_date.nil? && @issued_date.to_s.length < 1
        invalid_properties.push('invalid value for "issued_date", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@id.nil? && @id.to_s.length < 1
      return false if !@updated_date.nil? && @updated_date.to_s.length < 1
      return false if !@issued_date.nil? && @issued_date.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if !id.nil? && id.to_s.length < 1
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_date Value to be assigned
    def updated_date=(updated_date)
      if !updated_date.nil? && updated_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "updated_date", the character length must be great than or equal to 1.'
      end

      @updated_date = updated_date
    end

    # Custom attribute writer method with validation
    # @param [Object] issued_date Value to be assigned
    def issued_date=(issued_date)
      if !issued_date.nil? && issued_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "issued_date", the character length must be great than or equal to 1.'
      end

      @issued_date = issued_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pulp_href == o.pulp_href &&
          pulp_created == o.pulp_created &&
          artifact == o.artifact &&
          id == o.id &&
          updated_date == o.updated_date &&
          description == o.description &&
          issued_date == o.issued_date &&
          fromstr == o.fromstr &&
          status == o.status &&
          title == o.title &&
          summary == o.summary &&
          version == o.version &&
          type == o.type &&
          severity == o.severity &&
          solution == o.solution &&
          release == o.release &&
          rights == o.rights &&
          pushcount == o.pushcount &&
          pkglist == o.pkglist &&
          references == o.references &&
          reboot_suggested == o.reboot_suggested
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pulp_href, pulp_created, artifact, id, updated_date, description, issued_date, fromstr, status, title, summary, version, type, severity, solution, release, rights, pushcount, pkglist, references, reboot_suggested].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
