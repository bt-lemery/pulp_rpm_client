=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module PulpRpmClient
  class Status
    # Version information of Pulp components
    attr_accessor :versions

    # List of online workers known to the application. An online worker is actively heartbeating and can respond to new work
    attr_accessor :online_workers

    # List of online content apps known to the application. An online content app is actively heartbeating and can serve data to clients
    attr_accessor :online_content_apps

    attr_accessor :database_connection

    attr_accessor :redis_connection

    attr_accessor :storage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'versions' => :'versions',
        :'online_workers' => :'online_workers',
        :'online_content_apps' => :'online_content_apps',
        :'database_connection' => :'database_connection',
        :'redis_connection' => :'redis_connection',
        :'storage' => :'storage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'versions' => :'Array<Version>',
        :'online_workers' => :'Array<Worker>',
        :'online_content_apps' => :'Array<ContentAppStatus>',
        :'database_connection' => :'DatabaseConnection',
        :'redis_connection' => :'RedisConnection',
        :'storage' => :'Storage'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'versions')
        if (value = attributes[:'versions']).is_a?(Array)
          self.versions = value
        end
      end

      if attributes.has_key?(:'online_workers')
        if (value = attributes[:'online_workers']).is_a?(Array)
          self.online_workers = value
        end
      end

      if attributes.has_key?(:'online_content_apps')
        if (value = attributes[:'online_content_apps']).is_a?(Array)
          self.online_content_apps = value
        end
      end

      if attributes.has_key?(:'database_connection')
        self.database_connection = attributes[:'database_connection']
      end

      if attributes.has_key?(:'redis_connection')
        self.redis_connection = attributes[:'redis_connection']
      end

      if attributes.has_key?(:'storage')
        self.storage = attributes[:'storage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @versions.nil?
        invalid_properties.push('invalid value for "versions", versions cannot be nil.')
      end

      if @online_workers.nil?
        invalid_properties.push('invalid value for "online_workers", online_workers cannot be nil.')
      end

      if @online_content_apps.nil?
        invalid_properties.push('invalid value for "online_content_apps", online_content_apps cannot be nil.')
      end

      if @database_connection.nil?
        invalid_properties.push('invalid value for "database_connection", database_connection cannot be nil.')
      end

      if @redis_connection.nil?
        invalid_properties.push('invalid value for "redis_connection", redis_connection cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @versions.nil?
      return false if @online_workers.nil?
      return false if @online_content_apps.nil?
      return false if @database_connection.nil?
      return false if @redis_connection.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          versions == o.versions &&
          online_workers == o.online_workers &&
          online_content_apps == o.online_content_apps &&
          database_connection == o.database_connection &&
          redis_connection == o.redis_connection &&
          storage == o.storage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [versions, online_workers, online_content_apps, database_connection, redis_connection, storage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PulpRpmClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
