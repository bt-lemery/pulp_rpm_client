=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module PulpRpmClient
  class RpmModulemd
    attr_accessor :pulp_href

    # Timestamp of creation.
    attr_accessor :pulp_created

    # Artifact file representing the physical content
    attr_accessor :artifact

    # Modulemd name.
    attr_accessor :name

    # Stream name.
    attr_accessor :stream

    # Modulemd version.
    attr_accessor :version

    # Modulemd context.
    attr_accessor :context

    # Modulemd architecture.
    attr_accessor :arch

    # Modulemd artifacts.
    attr_accessor :artifacts

    # Modulemd dependencies.
    attr_accessor :dependencies

    # Modulemd artifacts' packages.
    attr_accessor :packages

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pulp_href' => :'pulp_href',
        :'pulp_created' => :'pulp_created',
        :'artifact' => :'artifact',
        :'name' => :'name',
        :'stream' => :'stream',
        :'version' => :'version',
        :'context' => :'context',
        :'arch' => :'arch',
        :'artifacts' => :'artifacts',
        :'dependencies' => :'dependencies',
        :'packages' => :'packages'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'pulp_href' => :'String',
        :'pulp_created' => :'DateTime',
        :'artifact' => :'String',
        :'name' => :'String',
        :'stream' => :'String',
        :'version' => :'String',
        :'context' => :'String',
        :'arch' => :'String',
        :'artifacts' => :'Object',
        :'dependencies' => :'Object',
        :'packages' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'pulp_href')
        self.pulp_href = attributes[:'pulp_href']
      end

      if attributes.has_key?(:'pulp_created')
        self.pulp_created = attributes[:'pulp_created']
      end

      if attributes.has_key?(:'artifact')
        self.artifact = attributes[:'artifact']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'stream')
        self.stream = attributes[:'stream']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.has_key?(:'arch')
        self.arch = attributes[:'arch']
      end

      if attributes.has_key?(:'artifacts')
        self.artifacts = attributes[:'artifacts']
      end

      if attributes.has_key?(:'dependencies')
        self.dependencies = attributes[:'dependencies']
      end

      if attributes.has_key?(:'packages')
        if (value = attributes[:'packages']).is_a?(Array)
          self.packages = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @stream.nil?
        invalid_properties.push('invalid value for "stream", stream cannot be nil.')
      end

      if @stream.to_s.length < 1
        invalid_properties.push('invalid value for "stream", the character length must be great than or equal to 1.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @version.to_s.length < 1
        invalid_properties.push('invalid value for "version", the character length must be great than or equal to 1.')
      end

      if @context.nil?
        invalid_properties.push('invalid value for "context", context cannot be nil.')
      end

      if @context.to_s.length < 1
        invalid_properties.push('invalid value for "context", the character length must be great than or equal to 1.')
      end

      if @arch.nil?
        invalid_properties.push('invalid value for "arch", arch cannot be nil.')
      end

      if @arch.to_s.length < 1
        invalid_properties.push('invalid value for "arch", the character length must be great than or equal to 1.')
      end

      if @artifacts.nil?
        invalid_properties.push('invalid value for "artifacts", artifacts cannot be nil.')
      end

      if @dependencies.nil?
        invalid_properties.push('invalid value for "dependencies", dependencies cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @stream.nil?
      return false if @stream.to_s.length < 1
      return false if @version.nil?
      return false if @version.to_s.length < 1
      return false if @context.nil?
      return false if @context.to_s.length < 1
      return false if @arch.nil?
      return false if @arch.to_s.length < 1
      return false if @artifacts.nil?
      return false if @dependencies.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] stream Value to be assigned
    def stream=(stream)
      if stream.nil?
        fail ArgumentError, 'stream cannot be nil'
      end

      if stream.to_s.length < 1
        fail ArgumentError, 'invalid value for "stream", the character length must be great than or equal to 1.'
      end

      @stream = stream
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if version.nil?
        fail ArgumentError, 'version cannot be nil'
      end

      if version.to_s.length < 1
        fail ArgumentError, 'invalid value for "version", the character length must be great than or equal to 1.'
      end

      @version = version
    end

    # Custom attribute writer method with validation
    # @param [Object] context Value to be assigned
    def context=(context)
      if context.nil?
        fail ArgumentError, 'context cannot be nil'
      end

      if context.to_s.length < 1
        fail ArgumentError, 'invalid value for "context", the character length must be great than or equal to 1.'
      end

      @context = context
    end

    # Custom attribute writer method with validation
    # @param [Object] arch Value to be assigned
    def arch=(arch)
      if arch.nil?
        fail ArgumentError, 'arch cannot be nil'
      end

      if arch.to_s.length < 1
        fail ArgumentError, 'invalid value for "arch", the character length must be great than or equal to 1.'
      end

      @arch = arch
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pulp_href == o.pulp_href &&
          pulp_created == o.pulp_created &&
          artifact == o.artifact &&
          name == o.name &&
          stream == o.stream &&
          version == o.version &&
          context == o.context &&
          arch == o.arch &&
          artifacts == o.artifacts &&
          dependencies == o.dependencies &&
          packages == o.packages
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pulp_href, pulp_created, artifact, name, stream, version, context, arch, artifacts, dependencies, packages].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PulpRpmClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
