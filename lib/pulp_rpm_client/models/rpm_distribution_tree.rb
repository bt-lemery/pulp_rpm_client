=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module PulpRpmClient
  class RpmDistributionTree
    attr_accessor :pulp_href

    # Header Version.
    attr_accessor :header_version

    # Release name.
    attr_accessor :release_name

    # Release short name.
    attr_accessor :release_short

    # Release version.
    attr_accessor :release_version

    # Typically False for an operating system, True otherwise.
    attr_accessor :release_is_layered

    # Base Product name.
    attr_accessor :base_product_name

    # Base Product short name.
    attr_accessor :base_product_short

    # Base Product version.
    attr_accessor :base_product_version

    # Tree architecturerch.
    attr_accessor :arch

    # Tree build time timestamp.
    attr_accessor :build_timestamp

    # Relative path to Anaconda instimage.
    attr_accessor :instimage

    # Relative path to Anaconda stage2 image.
    attr_accessor :mainimage

    # Disc number.
    attr_accessor :discnum

    # Number of discs in media set.
    attr_accessor :totaldiscs

    attr_accessor :addons

    attr_accessor :checksums

    attr_accessor :images

    attr_accessor :variants

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pulp_href' => :'pulp_href',
        :'header_version' => :'header_version',
        :'release_name' => :'release_name',
        :'release_short' => :'release_short',
        :'release_version' => :'release_version',
        :'release_is_layered' => :'release_is_layered',
        :'base_product_name' => :'base_product_name',
        :'base_product_short' => :'base_product_short',
        :'base_product_version' => :'base_product_version',
        :'arch' => :'arch',
        :'build_timestamp' => :'build_timestamp',
        :'instimage' => :'instimage',
        :'mainimage' => :'mainimage',
        :'discnum' => :'discnum',
        :'totaldiscs' => :'totaldiscs',
        :'addons' => :'addons',
        :'checksums' => :'checksums',
        :'images' => :'images',
        :'variants' => :'variants'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'pulp_href' => :'String',
        :'header_version' => :'String',
        :'release_name' => :'String',
        :'release_short' => :'String',
        :'release_version' => :'String',
        :'release_is_layered' => :'BOOLEAN',
        :'base_product_name' => :'String',
        :'base_product_short' => :'String',
        :'base_product_version' => :'String',
        :'arch' => :'String',
        :'build_timestamp' => :'Float',
        :'instimage' => :'String',
        :'mainimage' => :'String',
        :'discnum' => :'Integer',
        :'totaldiscs' => :'Integer',
        :'addons' => :'Array<Addon>',
        :'checksums' => :'Array<Checksum>',
        :'images' => :'Array<Image>',
        :'variants' => :'Array<Variant>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'pulp_href')
        self.pulp_href = attributes[:'pulp_href']
      end

      if attributes.has_key?(:'header_version')
        self.header_version = attributes[:'header_version']
      end

      if attributes.has_key?(:'release_name')
        self.release_name = attributes[:'release_name']
      end

      if attributes.has_key?(:'release_short')
        self.release_short = attributes[:'release_short']
      end

      if attributes.has_key?(:'release_version')
        self.release_version = attributes[:'release_version']
      end

      if attributes.has_key?(:'release_is_layered')
        self.release_is_layered = attributes[:'release_is_layered']
      end

      if attributes.has_key?(:'base_product_name')
        self.base_product_name = attributes[:'base_product_name']
      end

      if attributes.has_key?(:'base_product_short')
        self.base_product_short = attributes[:'base_product_short']
      end

      if attributes.has_key?(:'base_product_version')
        self.base_product_version = attributes[:'base_product_version']
      end

      if attributes.has_key?(:'arch')
        self.arch = attributes[:'arch']
      end

      if attributes.has_key?(:'build_timestamp')
        self.build_timestamp = attributes[:'build_timestamp']
      end

      if attributes.has_key?(:'instimage')
        self.instimage = attributes[:'instimage']
      end

      if attributes.has_key?(:'mainimage')
        self.mainimage = attributes[:'mainimage']
      end

      if attributes.has_key?(:'discnum')
        self.discnum = attributes[:'discnum']
      end

      if attributes.has_key?(:'totaldiscs')
        self.totaldiscs = attributes[:'totaldiscs']
      end

      if attributes.has_key?(:'addons')
        if (value = attributes[:'addons']).is_a?(Array)
          self.addons = value
        end
      end

      if attributes.has_key?(:'checksums')
        if (value = attributes[:'checksums']).is_a?(Array)
          self.checksums = value
        end
      end

      if attributes.has_key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.has_key?(:'variants')
        if (value = attributes[:'variants']).is_a?(Array)
          self.variants = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @header_version.nil?
        invalid_properties.push('invalid value for "header_version", header_version cannot be nil.')
      end

      if @header_version.to_s.length < 1
        invalid_properties.push('invalid value for "header_version", the character length must be great than or equal to 1.')
      end

      if @release_name.nil?
        invalid_properties.push('invalid value for "release_name", release_name cannot be nil.')
      end

      if @release_name.to_s.length < 1
        invalid_properties.push('invalid value for "release_name", the character length must be great than or equal to 1.')
      end

      if @release_short.nil?
        invalid_properties.push('invalid value for "release_short", release_short cannot be nil.')
      end

      if @release_short.to_s.length < 1
        invalid_properties.push('invalid value for "release_short", the character length must be great than or equal to 1.')
      end

      if @release_version.nil?
        invalid_properties.push('invalid value for "release_version", release_version cannot be nil.')
      end

      if @release_version.to_s.length < 1
        invalid_properties.push('invalid value for "release_version", the character length must be great than or equal to 1.')
      end

      if @release_is_layered.nil?
        invalid_properties.push('invalid value for "release_is_layered", release_is_layered cannot be nil.')
      end

      if @base_product_name.nil?
        invalid_properties.push('invalid value for "base_product_name", base_product_name cannot be nil.')
      end

      if @base_product_name.to_s.length < 1
        invalid_properties.push('invalid value for "base_product_name", the character length must be great than or equal to 1.')
      end

      if @base_product_short.nil?
        invalid_properties.push('invalid value for "base_product_short", base_product_short cannot be nil.')
      end

      if @base_product_short.to_s.length < 1
        invalid_properties.push('invalid value for "base_product_short", the character length must be great than or equal to 1.')
      end

      if @base_product_version.nil?
        invalid_properties.push('invalid value for "base_product_version", base_product_version cannot be nil.')
      end

      if @base_product_version.to_s.length < 1
        invalid_properties.push('invalid value for "base_product_version", the character length must be great than or equal to 1.')
      end

      if @arch.nil?
        invalid_properties.push('invalid value for "arch", arch cannot be nil.')
      end

      if @arch.to_s.length < 1
        invalid_properties.push('invalid value for "arch", the character length must be great than or equal to 1.')
      end

      if @build_timestamp.nil?
        invalid_properties.push('invalid value for "build_timestamp", build_timestamp cannot be nil.')
      end

      if @instimage.nil?
        invalid_properties.push('invalid value for "instimage", instimage cannot be nil.')
      end

      if @instimage.to_s.length < 1
        invalid_properties.push('invalid value for "instimage", the character length must be great than or equal to 1.')
      end

      if @mainimage.nil?
        invalid_properties.push('invalid value for "mainimage", mainimage cannot be nil.')
      end

      if @mainimage.to_s.length < 1
        invalid_properties.push('invalid value for "mainimage", the character length must be great than or equal to 1.')
      end

      if @discnum.nil?
        invalid_properties.push('invalid value for "discnum", discnum cannot be nil.')
      end

      if @totaldiscs.nil?
        invalid_properties.push('invalid value for "totaldiscs", totaldiscs cannot be nil.')
      end

      if @addons.nil?
        invalid_properties.push('invalid value for "addons", addons cannot be nil.')
      end

      if @checksums.nil?
        invalid_properties.push('invalid value for "checksums", checksums cannot be nil.')
      end

      if @images.nil?
        invalid_properties.push('invalid value for "images", images cannot be nil.')
      end

      if @variants.nil?
        invalid_properties.push('invalid value for "variants", variants cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @header_version.nil?
      return false if @header_version.to_s.length < 1
      return false if @release_name.nil?
      return false if @release_name.to_s.length < 1
      return false if @release_short.nil?
      return false if @release_short.to_s.length < 1
      return false if @release_version.nil?
      return false if @release_version.to_s.length < 1
      return false if @release_is_layered.nil?
      return false if @base_product_name.nil?
      return false if @base_product_name.to_s.length < 1
      return false if @base_product_short.nil?
      return false if @base_product_short.to_s.length < 1
      return false if @base_product_version.nil?
      return false if @base_product_version.to_s.length < 1
      return false if @arch.nil?
      return false if @arch.to_s.length < 1
      return false if @build_timestamp.nil?
      return false if @instimage.nil?
      return false if @instimage.to_s.length < 1
      return false if @mainimage.nil?
      return false if @mainimage.to_s.length < 1
      return false if @discnum.nil?
      return false if @totaldiscs.nil?
      return false if @addons.nil?
      return false if @checksums.nil?
      return false if @images.nil?
      return false if @variants.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] header_version Value to be assigned
    def header_version=(header_version)
      if header_version.nil?
        fail ArgumentError, 'header_version cannot be nil'
      end

      if header_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "header_version", the character length must be great than or equal to 1.'
      end

      @header_version = header_version
    end

    # Custom attribute writer method with validation
    # @param [Object] release_name Value to be assigned
    def release_name=(release_name)
      if release_name.nil?
        fail ArgumentError, 'release_name cannot be nil'
      end

      if release_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "release_name", the character length must be great than or equal to 1.'
      end

      @release_name = release_name
    end

    # Custom attribute writer method with validation
    # @param [Object] release_short Value to be assigned
    def release_short=(release_short)
      if release_short.nil?
        fail ArgumentError, 'release_short cannot be nil'
      end

      if release_short.to_s.length < 1
        fail ArgumentError, 'invalid value for "release_short", the character length must be great than or equal to 1.'
      end

      @release_short = release_short
    end

    # Custom attribute writer method with validation
    # @param [Object] release_version Value to be assigned
    def release_version=(release_version)
      if release_version.nil?
        fail ArgumentError, 'release_version cannot be nil'
      end

      if release_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "release_version", the character length must be great than or equal to 1.'
      end

      @release_version = release_version
    end

    # Custom attribute writer method with validation
    # @param [Object] base_product_name Value to be assigned
    def base_product_name=(base_product_name)
      if base_product_name.nil?
        fail ArgumentError, 'base_product_name cannot be nil'
      end

      if base_product_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "base_product_name", the character length must be great than or equal to 1.'
      end

      @base_product_name = base_product_name
    end

    # Custom attribute writer method with validation
    # @param [Object] base_product_short Value to be assigned
    def base_product_short=(base_product_short)
      if base_product_short.nil?
        fail ArgumentError, 'base_product_short cannot be nil'
      end

      if base_product_short.to_s.length < 1
        fail ArgumentError, 'invalid value for "base_product_short", the character length must be great than or equal to 1.'
      end

      @base_product_short = base_product_short
    end

    # Custom attribute writer method with validation
    # @param [Object] base_product_version Value to be assigned
    def base_product_version=(base_product_version)
      if base_product_version.nil?
        fail ArgumentError, 'base_product_version cannot be nil'
      end

      if base_product_version.to_s.length < 1
        fail ArgumentError, 'invalid value for "base_product_version", the character length must be great than or equal to 1.'
      end

      @base_product_version = base_product_version
    end

    # Custom attribute writer method with validation
    # @param [Object] arch Value to be assigned
    def arch=(arch)
      if arch.nil?
        fail ArgumentError, 'arch cannot be nil'
      end

      if arch.to_s.length < 1
        fail ArgumentError, 'invalid value for "arch", the character length must be great than or equal to 1.'
      end

      @arch = arch
    end

    # Custom attribute writer method with validation
    # @param [Object] instimage Value to be assigned
    def instimage=(instimage)
      if instimage.nil?
        fail ArgumentError, 'instimage cannot be nil'
      end

      if instimage.to_s.length < 1
        fail ArgumentError, 'invalid value for "instimage", the character length must be great than or equal to 1.'
      end

      @instimage = instimage
    end

    # Custom attribute writer method with validation
    # @param [Object] mainimage Value to be assigned
    def mainimage=(mainimage)
      if mainimage.nil?
        fail ArgumentError, 'mainimage cannot be nil'
      end

      if mainimage.to_s.length < 1
        fail ArgumentError, 'invalid value for "mainimage", the character length must be great than or equal to 1.'
      end

      @mainimage = mainimage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pulp_href == o.pulp_href &&
          header_version == o.header_version &&
          release_name == o.release_name &&
          release_short == o.release_short &&
          release_version == o.release_version &&
          release_is_layered == o.release_is_layered &&
          base_product_name == o.base_product_name &&
          base_product_short == o.base_product_short &&
          base_product_version == o.base_product_version &&
          arch == o.arch &&
          build_timestamp == o.build_timestamp &&
          instimage == o.instimage &&
          mainimage == o.mainimage &&
          discnum == o.discnum &&
          totaldiscs == o.totaldiscs &&
          addons == o.addons &&
          checksums == o.checksums &&
          images == o.images &&
          variants == o.variants
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pulp_href, header_version, release_name, release_short, release_version, release_is_layered, base_product_name, base_product_short, base_product_version, arch, build_timestamp, instimage, mainimage, discnum, totaldiscs, addons, checksums, images, variants].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PulpRpmClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
