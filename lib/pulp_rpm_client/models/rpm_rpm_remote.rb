=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module SwaggerClient
  class RpmRpmRemote
    attr_accessor :pulp_href

    # Timestamp of creation.
    attr_accessor :pulp_created

    # A unique name for this remote.
    attr_accessor :name

    # The URL of an external content source.
    attr_accessor :url

    # A string containing the PEM encoded CA certificate used to validate the server certificate presented by the remote server. All new line characters must be escaped. Returns SHA256 sum on GET.
    attr_accessor :ca_cert

    # A string containing the PEM encoded client certificate used for authentication. All new line characters must be escaped. Returns SHA256 sum on GET.
    attr_accessor :client_cert

    # A PEM encoded private key used for authentication. Returns SHA256 sum on GET.
    attr_accessor :client_key

    # If True, TLS peer validation must be performed.
    attr_accessor :tls_validation

    # The proxy URL. Format: scheme://user:password@host:port
    attr_accessor :proxy_url

    # Timestamp of the most recent update of the remote.
    attr_accessor :pulp_last_updated

    # Total number of simultaneous connections.
    attr_accessor :download_concurrency

    # The policy to use when downloading content. The possible values include: 'immediate', 'on_demand', and 'streamed'. 'immediate' is the default.
    attr_accessor :policy

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pulp_href' => :'pulp_href',
        :'pulp_created' => :'pulp_created',
        :'name' => :'name',
        :'url' => :'url',
        :'ca_cert' => :'ca_cert',
        :'client_cert' => :'client_cert',
        :'client_key' => :'client_key',
        :'tls_validation' => :'tls_validation',
        :'proxy_url' => :'proxy_url',
        :'pulp_last_updated' => :'pulp_last_updated',
        :'download_concurrency' => :'download_concurrency',
        :'policy' => :'policy'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'pulp_href' => :'String',
        :'pulp_created' => :'DateTime',
        :'name' => :'String',
        :'url' => :'String',
        :'ca_cert' => :'String',
        :'client_cert' => :'String',
        :'client_key' => :'String',
        :'tls_validation' => :'BOOLEAN',
        :'proxy_url' => :'String',
        :'pulp_last_updated' => :'DateTime',
        :'download_concurrency' => :'Integer',
        :'policy' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'pulp_href')
        self.pulp_href = attributes[:'pulp_href']
      end

      if attributes.has_key?(:'pulp_created')
        self.pulp_created = attributes[:'pulp_created']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'ca_cert')
        self.ca_cert = attributes[:'ca_cert']
      end

      if attributes.has_key?(:'client_cert')
        self.client_cert = attributes[:'client_cert']
      end

      if attributes.has_key?(:'client_key')
        self.client_key = attributes[:'client_key']
      end

      if attributes.has_key?(:'tls_validation')
        self.tls_validation = attributes[:'tls_validation']
      end

      if attributes.has_key?(:'proxy_url')
        self.proxy_url = attributes[:'proxy_url']
      end

      if attributes.has_key?(:'pulp_last_updated')
        self.pulp_last_updated = attributes[:'pulp_last_updated']
      end

      if attributes.has_key?(:'download_concurrency')
        self.download_concurrency = attributes[:'download_concurrency']
      end

      if attributes.has_key?(:'policy')
        self.policy = attributes[:'policy']
      else
        self.policy = 'immediate'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @url.to_s.length < 1
        invalid_properties.push('invalid value for "url", the character length must be great than or equal to 1.')
      end

      if !@ca_cert.nil? && @ca_cert.to_s.length < 1
        invalid_properties.push('invalid value for "ca_cert", the character length must be great than or equal to 1.')
      end

      if !@client_cert.nil? && @client_cert.to_s.length < 1
        invalid_properties.push('invalid value for "client_cert", the character length must be great than or equal to 1.')
      end

      if !@client_key.nil? && @client_key.to_s.length < 1
        invalid_properties.push('invalid value for "client_key", the character length must be great than or equal to 1.')
      end

      if !@proxy_url.nil? && @proxy_url.to_s.length < 1
        invalid_properties.push('invalid value for "proxy_url", the character length must be great than or equal to 1.')
      end

      if !@download_concurrency.nil? && @download_concurrency < 1
        invalid_properties.push('invalid value for "download_concurrency", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @url.nil?
      return false if @url.to_s.length < 1
      return false if !@ca_cert.nil? && @ca_cert.to_s.length < 1
      return false if !@client_cert.nil? && @client_cert.to_s.length < 1
      return false if !@client_key.nil? && @client_key.to_s.length < 1
      return false if !@proxy_url.nil? && @proxy_url.to_s.length < 1
      return false if !@download_concurrency.nil? && @download_concurrency < 1
      policy_validator = EnumAttributeValidator.new('String', ['immediate', 'on_demand', 'streamed'])
      return false unless policy_validator.valid?(@policy)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.nil?
        fail ArgumentError, 'url cannot be nil'
      end

      if url.to_s.length < 1
        fail ArgumentError, 'invalid value for "url", the character length must be great than or equal to 1.'
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] ca_cert Value to be assigned
    def ca_cert=(ca_cert)
      if !ca_cert.nil? && ca_cert.to_s.length < 1
        fail ArgumentError, 'invalid value for "ca_cert", the character length must be great than or equal to 1.'
      end

      @ca_cert = ca_cert
    end

    # Custom attribute writer method with validation
    # @param [Object] client_cert Value to be assigned
    def client_cert=(client_cert)
      if !client_cert.nil? && client_cert.to_s.length < 1
        fail ArgumentError, 'invalid value for "client_cert", the character length must be great than or equal to 1.'
      end

      @client_cert = client_cert
    end

    # Custom attribute writer method with validation
    # @param [Object] client_key Value to be assigned
    def client_key=(client_key)
      if !client_key.nil? && client_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "client_key", the character length must be great than or equal to 1.'
      end

      @client_key = client_key
    end

    # Custom attribute writer method with validation
    # @param [Object] proxy_url Value to be assigned
    def proxy_url=(proxy_url)
      if !proxy_url.nil? && proxy_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "proxy_url", the character length must be great than or equal to 1.'
      end

      @proxy_url = proxy_url
    end

    # Custom attribute writer method with validation
    # @param [Object] download_concurrency Value to be assigned
    def download_concurrency=(download_concurrency)
      if !download_concurrency.nil? && download_concurrency < 1
        fail ArgumentError, 'invalid value for "download_concurrency", must be greater than or equal to 1.'
      end

      @download_concurrency = download_concurrency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] policy Object to be assigned
    def policy=(policy)
      validator = EnumAttributeValidator.new('String', ['immediate', 'on_demand', 'streamed'])
      unless validator.valid?(policy)
        fail ArgumentError, 'invalid value for "policy", must be one of #{validator.allowable_values}.'
      end
      @policy = policy
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pulp_href == o.pulp_href &&
          pulp_created == o.pulp_created &&
          name == o.name &&
          url == o.url &&
          ca_cert == o.ca_cert &&
          client_cert == o.client_cert &&
          client_key == o.client_key &&
          tls_validation == o.tls_validation &&
          proxy_url == o.proxy_url &&
          pulp_last_updated == o.pulp_last_updated &&
          download_concurrency == o.download_concurrency &&
          policy == o.policy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pulp_href, pulp_created, name, url, ca_cert, client_cert, client_key, tls_validation, proxy_url, pulp_last_updated, download_concurrency, policy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
