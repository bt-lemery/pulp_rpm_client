=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a task
    # 
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(task_href, opts = {})
      delete_with_http_info(task_href, opts)
      nil
    end

    # Delete a task
    # 
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(task_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.delete ...'
      end
      # verify the required parameter 'task_href' is set
      if @api_client.config.client_side_validation && task_href.nil?
        fail ArgumentError, "Missing the required parameter 'task_href' when calling TasksApi.delete"
      end
      # resource path
      local_var_path = '{task_href}'.sub('{' + 'task_href' + '}', task_href.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tasks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ordering Which field to use when ordering the results.
    # @option opts [String] :state 
    # @option opts [String] :state__in Filter results where state is in a comma-separated list of values
    # @option opts [String] :worker Foreign Key referenced by HREF
    # @option opts [String] :worker__in Filter results where worker is in a comma-separated list of values
    # @option opts [String] :name__contains Filter results where name contains value
    # @option opts [String] :started_at__lt Filter results where started_at is less than value
    # @option opts [String] :started_at__lte Filter results where started_at is less than or equal to value
    # @option opts [String] :started_at__gt Filter results where started_at is greater than value
    # @option opts [String] :started_at__gte Filter results where started_at is greater than or equal to value
    # @option opts [String] :started_at__range Filter results where started_at is between two comma separated values
    # @option opts [String] :finished_at__lt Filter results where finished_at is less than value
    # @option opts [String] :finished_at__lte Filter results where finished_at is less than or equal to value
    # @option opts [String] :finished_at__gt Filter results where finished_at is greater than value
    # @option opts [String] :finished_at__gte Filter results where finished_at is greater than or equal to value
    # @option opts [String] :finished_at__range Filter results where finished_at is between two comma separated values
    # @option opts [String] :reserved_resources_record 
    # @option opts [String] :created_resources 
    # @option opts [String] :name 
    # @option opts [String] :started_at ISO 8601 formatted dates are supported
    # @option opts [String] :finished_at ISO 8601 formatted dates are supported
    # @option opts [String] :parent Foreign Key referenced by HREF
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [InlineResponse20022]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # List tasks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ordering Which field to use when ordering the results.
    # @option opts [String] :state 
    # @option opts [String] :state__in Filter results where state is in a comma-separated list of values
    # @option opts [String] :worker Foreign Key referenced by HREF
    # @option opts [String] :worker__in Filter results where worker is in a comma-separated list of values
    # @option opts [String] :name__contains Filter results where name contains value
    # @option opts [String] :started_at__lt Filter results where started_at is less than value
    # @option opts [String] :started_at__lte Filter results where started_at is less than or equal to value
    # @option opts [String] :started_at__gt Filter results where started_at is greater than value
    # @option opts [String] :started_at__gte Filter results where started_at is greater than or equal to value
    # @option opts [String] :started_at__range Filter results where started_at is between two comma separated values
    # @option opts [String] :finished_at__lt Filter results where finished_at is less than value
    # @option opts [String] :finished_at__lte Filter results where finished_at is less than or equal to value
    # @option opts [String] :finished_at__gt Filter results where finished_at is greater than value
    # @option opts [String] :finished_at__gte Filter results where finished_at is greater than or equal to value
    # @option opts [String] :finished_at__range Filter results where finished_at is between two comma separated values
    # @option opts [String] :reserved_resources_record 
    # @option opts [String] :created_resources 
    # @option opts [String] :name 
    # @option opts [String] :started_at ISO 8601 formatted dates are supported
    # @option opts [String] :finished_at ISO 8601 formatted dates are supported
    # @option opts [String] :parent Foreign Key referenced by HREF
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(InlineResponse20022, Fixnum, Hash)>] InlineResponse20022 data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/tasks/'

      # query parameters
      query_params = {}
      query_params[:'ordering'] = opts[:'ordering'] if !opts[:'ordering'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'state__in'] = opts[:'state__in'] if !opts[:'state__in'].nil?
      query_params[:'worker'] = opts[:'worker'] if !opts[:'worker'].nil?
      query_params[:'worker__in'] = opts[:'worker__in'] if !opts[:'worker__in'].nil?
      query_params[:'name__contains'] = opts[:'name__contains'] if !opts[:'name__contains'].nil?
      query_params[:'started_at__lt'] = opts[:'started_at__lt'] if !opts[:'started_at__lt'].nil?
      query_params[:'started_at__lte'] = opts[:'started_at__lte'] if !opts[:'started_at__lte'].nil?
      query_params[:'started_at__gt'] = opts[:'started_at__gt'] if !opts[:'started_at__gt'].nil?
      query_params[:'started_at__gte'] = opts[:'started_at__gte'] if !opts[:'started_at__gte'].nil?
      query_params[:'started_at__range'] = opts[:'started_at__range'] if !opts[:'started_at__range'].nil?
      query_params[:'finished_at__lt'] = opts[:'finished_at__lt'] if !opts[:'finished_at__lt'].nil?
      query_params[:'finished_at__lte'] = opts[:'finished_at__lte'] if !opts[:'finished_at__lte'].nil?
      query_params[:'finished_at__gt'] = opts[:'finished_at__gt'] if !opts[:'finished_at__gt'].nil?
      query_params[:'finished_at__gte'] = opts[:'finished_at__gte'] if !opts[:'finished_at__gte'].nil?
      query_params[:'finished_at__range'] = opts[:'finished_at__range'] if !opts[:'finished_at__range'].nil?
      query_params[:'reserved_resources_record'] = opts[:'reserved_resources_record'] if !opts[:'reserved_resources_record'].nil?
      query_params[:'created_resources'] = opts[:'created_resources'] if !opts[:'created_resources'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'started_at'] = opts[:'started_at'] if !opts[:'started_at'].nil?
      query_params[:'finished_at'] = opts[:'finished_at'] if !opts[:'finished_at'].nil?
      query_params[:'parent'] = opts[:'parent'] if !opts[:'parent'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20022')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Inspect a task
    # 
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Task]
    def read(task_href, opts = {})
      data, _status_code, _headers = read_with_http_info(task_href, opts)
      data
    end

    # Inspect a task
    # 
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def read_with_http_info(task_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.read ...'
      end
      # verify the required parameter 'task_href' is set
      if @api_client.config.client_side_validation && task_href.nil?
        fail ArgumentError, "Missing the required parameter 'task_href' when calling TasksApi.read"
      end
      # resource path
      local_var_path = '{task_href}'.sub('{' + 'task_href' + '}', task_href.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a task
    # This operation cancels a task.
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def tasks_cancel(task_href, data, opts = {})
      data, _status_code, _headers = tasks_cancel_with_http_info(task_href, data, opts)
      data
    end

    # Cancel a task
    # This operation cancels a task.
    # @param task_href URI of Task. e.g.: /pulp/api/v3/tasks/1/
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def tasks_cancel_with_http_info(task_href, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.tasks_cancel ...'
      end
      # verify the required parameter 'task_href' is set
      if @api_client.config.client_side_validation && task_href.nil?
        fail ArgumentError, "Missing the required parameter 'task_href' when calling TasksApi.tasks_cancel"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TasksApi.tasks_cancel"
      end
      # resource path
      local_var_path = '{task_href}'.sub('{' + 'task_href' + '}', task_href.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
