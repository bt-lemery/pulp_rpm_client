=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class ContentAdvisoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an update record
    # Trigger an asynchronous task to create content,optionally create new repository version.
    # @param relative_path Path where the artifact is located relative to distributions base_path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :artifact Artifact file representing the physical content
    # @option opts [File] :file An uploaded file that should be turned into the artifact of the content unit.
    # @option opts [String] :repository A URI of a repository the new content unit should be associated with.
    # @return [AsyncOperationResponse]
    def create(relative_path, opts = {})
      data, _status_code, _headers = create_with_http_info(relative_path, opts)
      data
    end

    # Create an update record
    # Trigger an asynchronous task to create content,optionally create new repository version.
    # @param relative_path Path where the artifact is located relative to distributions base_path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :artifact Artifact file representing the physical content
    # @option opts [File] :file An uploaded file that should be turned into the artifact of the content unit.
    # @option opts [String] :repository A URI of a repository the new content unit should be associated with.
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def create_with_http_info(relative_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentAdvisoriesApi.create ...'
      end
      # verify the required parameter 'relative_path' is set
      if @api_client.config.client_side_validation && relative_path.nil?
        fail ArgumentError, "Missing the required parameter 'relative_path' when calling ContentAdvisoriesApi.create"
      end
      if @api_client.config.client_side_validation && relative_path.to_s.length < 1
        fail ArgumentError, 'invalid value for "relative_path" when calling ContentAdvisoriesApi.create, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/pulp/api/v3/content/rpm/advisories/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['relative_path'] = relative_path
      form_params['artifact'] = opts[:'artifact'] if !opts[:'artifact'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['repository'] = opts[:'repository'] if !opts[:'repository'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentAdvisoriesApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List update records
    # Define endpoint name which will appear in the API endpoint for this content type. For example::     http://pulp.example.com/pulp/api/v3/content/rpm/advisories/  Also specify queryset and serializer for UpdateRecord.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Filter results where id matches value
    # @option opts [String] :id__in Filter results where id is in a comma-separated list of values
    # @option opts [String] :status Filter results where status matches value
    # @option opts [String] :status__in Filter results where status is in a comma-separated list of values
    # @option opts [String] :severity Filter results where severity matches value
    # @option opts [String] :severity__in Filter results where severity is in a comma-separated list of values
    # @option opts [String] :type Filter results where type matches value
    # @option opts [String] :type__in Filter results where type is in a comma-separated list of values
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [InlineResponse2002]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # List update records
    # Define endpoint name which will appear in the API endpoint for this content type. For example::     http://pulp.example.com/pulp/api/v3/content/rpm/advisories/  Also specify queryset and serializer for UpdateRecord.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Filter results where id matches value
    # @option opts [String] :id__in Filter results where id is in a comma-separated list of values
    # @option opts [String] :status Filter results where status matches value
    # @option opts [String] :status__in Filter results where status is in a comma-separated list of values
    # @option opts [String] :severity Filter results where severity matches value
    # @option opts [String] :severity__in Filter results where severity is in a comma-separated list of values
    # @option opts [String] :type Filter results where type matches value
    # @option opts [String] :type__in Filter results where type is in a comma-separated list of values
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentAdvisoriesApi.list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/rpm/advisories/'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'id__in'] = opts[:'id__in'] if !opts[:'id__in'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'status__in'] = opts[:'status__in'] if !opts[:'status__in'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'severity__in'] = opts[:'severity__in'] if !opts[:'severity__in'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'type__in'] = opts[:'type__in'] if !opts[:'type__in'].nil?
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentAdvisoriesApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Inspect an update record
    # Define endpoint name which will appear in the API endpoint for this content type. For example::     http://pulp.example.com/pulp/api/v3/content/rpm/advisories/  Also specify queryset and serializer for UpdateRecord.
    # @param update_record_href URI of Update Record. e.g.: /pulp/api/v3/content/rpm/advisories/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [RpmUpdateRecord]
    def read(update_record_href, opts = {})
      data, _status_code, _headers = read_with_http_info(update_record_href, opts)
      data
    end

    # Inspect an update record
    # Define endpoint name which will appear in the API endpoint for this content type. For example::     http://pulp.example.com/pulp/api/v3/content/rpm/advisories/  Also specify queryset and serializer for UpdateRecord.
    # @param update_record_href URI of Update Record. e.g.: /pulp/api/v3/content/rpm/advisories/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(RpmUpdateRecord, Fixnum, Hash)>] RpmUpdateRecord data, response status code and response headers
    def read_with_http_info(update_record_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentAdvisoriesApi.read ...'
      end
      # verify the required parameter 'update_record_href' is set
      if @api_client.config.client_side_validation && update_record_href.nil?
        fail ArgumentError, "Missing the required parameter 'update_record_href' when calling ContentAdvisoriesApi.read"
      end
      # resource path
      local_var_path = '{update_record_href}'.sub('{' + 'update_record_href' + '}', update_record_href.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RpmUpdateRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentAdvisoriesApi#read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
