=begin
#Pulp 3 API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class ArtifactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an artifact
    # 
    # @param file The stored file.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :size The size of the file in bytes.
    # @option opts [String] :md5 The MD5 checksum of the file if available.
    # @option opts [String] :sha1 The SHA-1 checksum of the file if available.
    # @option opts [String] :sha224 The SHA-224 checksum of the file if available.
    # @option opts [String] :sha256 The SHA-256 checksum of the file if available.
    # @option opts [String] :sha384 The SHA-384 checksum of the file if available.
    # @option opts [String] :sha512 The SHA-512 checksum of the file if available.
    # @return [Artifact]
    def create(file, opts = {})
      data, _status_code, _headers = create_with_http_info(file, opts)
      data
    end

    # Create an artifact
    # 
    # @param file The stored file.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :size The size of the file in bytes.
    # @option opts [String] :md5 The MD5 checksum of the file if available.
    # @option opts [String] :sha1 The SHA-1 checksum of the file if available.
    # @option opts [String] :sha224 The SHA-224 checksum of the file if available.
    # @option opts [String] :sha256 The SHA-256 checksum of the file if available.
    # @option opts [String] :sha384 The SHA-384 checksum of the file if available.
    # @option opts [String] :sha512 The SHA-512 checksum of the file if available.
    # @return [Array<(Artifact, Fixnum, Hash)>] Artifact data, response status code and response headers
    def create_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactsApi.create ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ArtifactsApi.create"
      end
      if @api_client.config.client_side_validation && !opts[:'md5'].nil? && opts[:'md5'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"md5"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sha1'].nil? && opts[:'sha1'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sha1"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sha224'].nil? && opts[:'sha224'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sha224"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sha256'].nil? && opts[:'sha256'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sha256"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sha384'].nil? && opts[:'sha384'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sha384"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'sha512'].nil? && opts[:'sha512'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"sha512"]" when calling ArtifactsApi.create, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/pulp/api/v3/artifacts/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['file'] = file
      form_params['size'] = opts[:'size'] if !opts[:'size'].nil?
      form_params['md5'] = opts[:'md5'] if !opts[:'md5'].nil?
      form_params['sha1'] = opts[:'sha1'] if !opts[:'sha1'].nil?
      form_params['sha224'] = opts[:'sha224'] if !opts[:'sha224'].nil?
      form_params['sha256'] = opts[:'sha256'] if !opts[:'sha256'].nil?
      form_params['sha384'] = opts[:'sha384'] if !opts[:'sha384'].nil?
      form_params['sha512'] = opts[:'sha512'] if !opts[:'sha512'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Artifact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an artifact
    # Remove Artifact only if it is not associated with any Content.
    # @param artifact_href URI of Artifact. e.g.: /pulp/api/v3/artifacts/1/
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(artifact_href, opts = {})
      delete_with_http_info(artifact_href, opts)
      nil
    end

    # Delete an artifact
    # Remove Artifact only if it is not associated with any Content.
    # @param artifact_href URI of Artifact. e.g.: /pulp/api/v3/artifacts/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(artifact_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactsApi.delete ...'
      end
      # verify the required parameter 'artifact_href' is set
      if @api_client.config.client_side_validation && artifact_href.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_href' when calling ArtifactsApi.delete"
      end
      # resource path
      local_var_path = '{artifact_href}'.sub('{' + 'artifact_href' + '}', artifact_href.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List artifacts
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :md5 Filter results where md5 matches value
    # @option opts [String] :sha1 Filter results where sha1 matches value
    # @option opts [String] :sha224 Filter results where sha224 matches value
    # @option opts [String] :sha256 Filter results where sha256 matches value
    # @option opts [String] :sha384 Filter results where sha384 matches value
    # @option opts [String] :sha512 Filter results where sha512 matches value
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [InlineResponse200]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # List artifacts
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :md5 Filter results where md5 matches value
    # @option opts [String] :sha1 Filter results where sha1 matches value
    # @option opts [String] :sha224 Filter results where sha224 matches value
    # @option opts [String] :sha256 Filter results where sha256 matches value
    # @option opts [String] :sha384 Filter results where sha384 matches value
    # @option opts [String] :sha512 Filter results where sha512 matches value
    # @option opts [Integer] :limit Number of results to return per page.
    # @option opts [Integer] :offset The initial index from which to return the results.
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactsApi.list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/artifacts/'

      # query parameters
      query_params = {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'md5'] = opts[:'md5'] if !opts[:'md5'].nil?
      query_params[:'sha1'] = opts[:'sha1'] if !opts[:'sha1'].nil?
      query_params[:'sha224'] = opts[:'sha224'] if !opts[:'sha224'].nil?
      query_params[:'sha256'] = opts[:'sha256'] if !opts[:'sha256'].nil?
      query_params[:'sha384'] = opts[:'sha384'] if !opts[:'sha384'].nil?
      query_params[:'sha512'] = opts[:'sha512'] if !opts[:'sha512'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Inspect an artifact
    # 
    # @param artifact_href URI of Artifact. e.g.: /pulp/api/v3/artifacts/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Artifact]
    def read(artifact_href, opts = {})
      data, _status_code, _headers = read_with_http_info(artifact_href, opts)
      data
    end

    # Inspect an artifact
    # 
    # @param artifact_href URI of Artifact. e.g.: /pulp/api/v3/artifacts/1/
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A list of fields to include in the response.
    # @option opts [String] :exclude_fields A list of fields to exclude from the response.
    # @return [Array<(Artifact, Fixnum, Hash)>] Artifact data, response status code and response headers
    def read_with_http_info(artifact_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactsApi.read ...'
      end
      # verify the required parameter 'artifact_href' is set
      if @api_client.config.client_side_validation && artifact_href.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_href' when calling ArtifactsApi.read"
      end
      # resource path
      local_var_path = '{artifact_href}'.sub('{' + 'artifact_href' + '}', artifact_href.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exclude_fields'] = opts[:'exclude_fields'] if !opts[:'exclude_fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Artifact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactsApi#read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
